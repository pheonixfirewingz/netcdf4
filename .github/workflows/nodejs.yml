name: Node.js CI

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:
    inputs:
      node-version:
        description: 'Node.js version to test (optional, defaults to matrix)'
        required: false
        type: choice
        options:
          - 'all'
          - '22.x'
        default: 'all'
      os:
        description: 'Operating system to test (optional, defaults to matrix)'
        required: false
        type: choice
        options:
          - 'all'
          - 'ubuntu-latest'
          - 'windows-latest'
          - 'macos-latest'
        default: 'all'

jobs:
  build-and-test:
    name: Build and Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20   # ⬅️ Added timeout here

    strategy:
      fail-fast: false
      matrix:
        os: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.os != 'all' && fromJSON(format('["{0}"]', github.event.inputs.os)) || fromJSON('["ubuntu-latest", "windows-latest", "macos-latest"]') }}
        node-version: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.node-version != 'all' && fromJSON(format('["{0}"]', github.event.inputs.node-version)) || fromJSON('["22.x"]') }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: false
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
    
    - name: Install build tools (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake git curl zip unzip tar pkg-config linux-libc-dev
    
    - name: Install build tools (macOS)
      if: runner.os == 'macOS'
      run: |
        # Xcode command line tools are usually pre-installed
        # Install additional tools if needed
        brew install cmake pkg-config
    
    - name: Install build tools (Windows)
      if: runner.os == 'Windows'
      uses: microsoft/setup-msbuild@v2
    
    - name: Setup vcpkg cache
      uses: actions/cache@v4
      with:
        path: |
          vcpkg
          vcpkg_installed
        key: ${{ runner.os }}-vcpkg-${{ hashFiles('**/package.json') }}
        restore-keys: |
          ${{ runner.os }}-vcpkg-
    
    - name: Install dependencies and build
      run: npm install
      env:
        CI: true
    
    - name: Run tests
      run: npm test
      env:
        CI: true
    
    - name: Upload build artifacts on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs-${{ matrix.os }}-node-${{ matrix.node-version }}
        path: |
          build/
          *.log
        retention-days: 7

  build-and-test-alpine:
    name: Build and Test on Alpine Linux
    runs-on: ubuntu-latest
    timeout-minutes: 20
    container:
      image: node:22-alpine
    
    steps:
    - name: Install build dependencies
      run: |
        apk update
        apk add --no-cache \
          build-base \
          cmake \
          git \
          curl \
          zip \
          unzip \
          tar \
          pkgconfig \
          linux-headers \
          bash
    
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: false
    
    - name: Setup vcpkg cache
      uses: actions/cache@v4
      with:
        path: |
          vcpkg
          vcpkg_installed
        key: alpine-vcpkg-${{ hashFiles('**/package.json') }}
        restore-keys: |
          alpine-vcpkg-
    
    - name: Install dependencies and build
      run: npm install
      env:
        CI: true
    
    - name: Run tests
      run: npm test
      env:
        CI: true
    
    - name: Upload build artifacts on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs-alpine-node-22
        path: |
          build/
          *.log
        retention-days: 7
